Resources:
  AuroraSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: Sample/aurora
      SecretString: '{"username":"${self:custom.secret.USER_NAME}", "password":"${self:custom.secret.PASSWORD}"}'
  SecretTargetAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref AuroraSecret
      TargetId: !Ref DBCluster
      TargetType: "AWS::RDS::DBCluster"
    DependsOn: DBCluster
  ProxyRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: sample-proxy-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "rds.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: RdsProxyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                Resource:
                  - !Ref AuroraSecret
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                Resource: "arn:aws:kms:${self:provider.region}:#{AWS::AccountId}:key/*"
                Condition:
                  StringEquals:
                    kms:ViaService: "secretsmanager.${self:provider.region}.amazonaws.com"
    DependsOn: AuroraSecret
